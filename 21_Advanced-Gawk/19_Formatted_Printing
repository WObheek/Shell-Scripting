\#!/bin/bash

# You can do is control the output field separator character (OFS)
# printf : use the formatted printing command  (allow detailed instructions on how to display data)

# format : printf "format string",var1, var2 . . .
# The format string is the key to the formatted output.
# It specifies exactly how the formatted output should appear, using both text elements and format specifiers.
# The gawk program uses each format specifies as a placeholder for each variable listed in the command.
# format specifiers: %[modifier]control-letter

# Look at summary for format specifier control letters
echo " --- showing in scientific notation --- "
gawk 'BEGIN{
x=10*100
printf "The answer is: %e\n",x
}'

echo
echo " --- Using printf to print name and number---"
gawk 'BEGIN{
FS="\n"
RS=""}
{printf "%s %s\n", $1, $4}' data_file3

echo
echo " using separate printf "
gawk '
BEGIN{
FS=","}
{printf "%s ", $1}
END{
printf "\n"}' data_file3
# each of the printf outputs appeas on the same line, to terminate the line, the END section prints a single newline character

echo
echo "--- Using modifier to format the first string value ---"
gawk 'BEGIN{
FS="\n"
RS=""}
{printf "%16s %s\n", $1,$4}' data_file3
# 16 modifier value, we force the output for the first string to use 16 spaces.
# By default, the printf command uses right justification to place the data in the format space.
echo
echo "--- left justified using -16s"
gawk 'BEGIN{
FS="\n"
RS=""}
{printf "%-16s %s\n", $1,$4}' data_file3

echo
echo " --- Dealing with floating number  ---"
gawk '{
total=0
for(i=0;i<4;i++)
{
  total += $i
}
avg = total/3
printf "Average: %5.1f\n",avg
}' data_file2

# By using %5.1f format specifier, you can force the printf command to round the floating point values to a single decimal place.

