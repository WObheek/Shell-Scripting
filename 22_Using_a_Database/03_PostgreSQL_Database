# One of most advanced open source database servers available for the linux environment.
# The administrator account in PostgreSQL is called postgres, not root.
# When you install postgreSQL on your Linux system, there must be a Linux uuser account named postgres
# The PostgreSQL command line client is called psql.

# Upon installation, Postgres is set up to use 'ident' authentication, meaning that it associates Postgres roles with a matching Unix/Linux system account. 
# If a role exists within Postgres, a Unix/Linux username with the same name is able to sign in as that role.

#### INSTALLATION
https://www.digitalocean.com/community/tutorials/how-to-install-postgresql-on-ubuntu-20-04-quickstart

# refresh your server’s local package index
sudo apt update
# install the Postgres package along with a -contrib package that adds some additional utilities and functionality
sudo apt install postgresql postgresql-contrib
# Ensure that the service is started:
sudo systemctl start postgresql.service
# IN WSL USE: `sudo service postgresql start`

# Step 2 — Using PostgreSQL Roles and Databases
# Postgres uses a concept called “roles” to handle authentication and authorization

# The installation procedure created a user account called postgres that is associated with the default Postgres role. 
# There are a few ways to utilize this account to access Postgres. 
# One way is to switch over to the postgres account on your server by running the following command:
sudo -i -u postgres
# Then you can access the Postgres prompt by running:
psql

# Another way to connect to the Postgres prompt is to run the psql command as the postgres account directly with sudo
sudo -u postgres psql

# To exit out of the PostgreSQL prompt, run the following:
\q
# This will bring you back to the postgres Linux command prompt. To return to your regular system user, run the exit command:
exit

# Step 3 — Creating a New Role
#If you are logged in as the postgres account, you can create a new role by running the following command:
createuser --interactive
# If, instead, you prefer to use sudo for each command without switching from your normal account, run:
sudo -u postgres createuser --interactive


# Step 4 — Creating a New Database
# Another assumption that the Postgres authentication system makes by default is that for any role used to log in, that role will have a database with the same name which it can access.
# This means that if the user you created is 'test', that role will attempt to connect to a database which is “test” by default. 
# You can create the appropriate database with the createdb command.
sudo -u postgres createdb test


# Step 5 — Opening a Postgres Prompt with the New Role
# To log in with 'ident' based authentication, 
# you’ll need a Linux user with the same name as your Postgres role and database.
# If you don’t have a matching Linux user available, you can create one with the adduser command. 
# You will have to do this from your non-root account with sudo privileges (meaning, not logged in as the postgres user):
sudo adduser wobheek
# Once this new account is available, you can either switch over and connect to the database by running the following:
sudo -i -u wobheek
psql

# Or, you can do this inline:
sudo -u wobheek psql

# This command will log you in automatically, assuming that all of the components have been properly configured.
# If you want your user to connect to a different database, you can do so by specifying the database like the following:
psql -d postgres
# Once logged in, you can get check your current connection information by running:
\conninfo

#######
# Commonly used meta-command
# \l  : list available databases
# \c  : connect to a database
# \dt : list the tables in a database
# \du : list the PostgreSQL users
# \z  : list table privileges
# \?  : list all of the available meta-commands
# \h  : list all available SQL commands
# \q  : exit database

##### NOTE ######
# postgreSQL adds another layer of control to the database called: schema
# A database can contain multiple schemas,each schema containing multiple tables. 
# This allows you to subdivide a database for specific applications or users.

# By default, every database contains one schema, called public. 
# If you're going to have one application  use the database.
# You're find with just using the public schema.
# If you'd like to really get fancy,you can create new schemas.

